import PySimpleGUI as sg
import matplotlib.pyplot as plt
import pandas as pd
from Main import train, generate_samples
from table_evaluator import TableEvaluator


# Set up the initial layout of the main window
sg.theme('LightGrey')
layout = [ [sg.Button('Train Model', size=(20,2)), sg.Button('Generate Samples', size=(20,2))]]
window = sg.Window('Synthetic Data Generator', layout, element_justification='c')

# Set up the layout of the train model window
train_layout = [[sg.Text('Enter the following parameters:')],
                [sg.Text('Choose File:'), sg.Input(key='file'), sg.FileBrowse()],
                
                [sg.Text('Number of epochs:'), sg.Input(key='epochs')],
                [sg.Text('Learning rate:'), sg.Input(key='learning_rate')],
                [sg.Text('Batch size:'), sg.Input(key='batch_size')],
                [sg.Checkbox('Save Model', default=True, key='save_model')],
                [sg.Text('Model name:'), sg.Input(key='model_name')],
                [sg.Button('Start Training'), sg.Button('Cancel')]]
train_window = sg.Window('Train Model', train_layout)

# Set up the layout of the generate samples window
generate_layout = [[sg.Text('Enter the following parameters:')],
                   [sg.Text('Trained model path:'), sg.Input(key='model_path'),  sg.FileBrowse()],
                   [sg.Text('Number of samples:'), sg.Input(key='n_samples')],
                   [sg.Text('Generated File Name:'), sg.Input(key='file_name')],
                   [sg.Button('Generate Samples'), sg.Button('Cancel')]]
generate_window = sg.Window('Generate Samples', generate_layout)

while True:
    event, values = window.read()

    if event == sg.WINDOW_CLOSED:
        break

    if event == 'Train Model':
        train_event, train_values = train_window.read()

        if train_event == sg.WINDOW_CLOSED or train_event == 'Cancel':
            continue

        # Call the train function with user-provided parameters
        history, dataset_real, synthetic_data = train(pd.read_csv(train_values['file']), 
                                                      int(train_values['epochs']), 
                                                      float(train_values['learning_rate']), 
                                                      int(train_values['batch_size']), 
                                                      train_values['save_model'], 
                                                      train_values['model_name'])

        # Plot the training history
        plt.plot(history["d_loss"], label="Discriminator Loss")
        plt.plot(history["g_loss"], label="Generator Loss")
        plt.legend()
        plt.show()
        table_evaluator = TableEvaluator(dataset_real, synthetic_data)

        table_evaluator.visual_evaluation()

        # Display the synthetic data generated by the model
        sg.popup_scrolled(synthetic_data.to_string(index=False), title='Synthetic Data')

    if event == 'Generate Samples':
        generate_event, generate_values = generate_window.read()

        if generate_event == sg.WINDOW_CLOSED or generate_event == 'Cancel':
            continue

        # Call the generate_samples function with user-provided parameters
        generated_samples = generate_samples(generate_values['model_path'], int(generate_values['n_samples']), generate_values['file_name'])

        # Display the generated samples
        sg.popup_scrolled(generated_samples.to_string(index=False), title='Generated Samples')

window.close()